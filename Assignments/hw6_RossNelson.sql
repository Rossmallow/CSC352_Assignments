-- Ross Nelson CSC352 Assignment 6
-- March 9th 2020

-- 1.
DECLARE
    CELSIUS     NUMBER(3) := 21;
    FAHRENHEIT  NUMBER(4, 1);
    
PROCEDURE TEMP_CONVERT(TEMP_C IN NUMBER,
                       TEMP_F OUT NUMBER) IS
BEGIN
    TEMP_F := (TEMP_C * 1.8) + 32;
END;

BEGIN
    TEMP_CONVERT(CELSIUS, FAHRENHEIT);
    DBMS_OUTPUT.PUT_LINE(CELSIUS || ' Degrees Celsius is ' || FAHRENHEIT || ' Fahrenheit ');
END;
/

-- 2.
DECLARE
    ID_1 EMPLOYEES.EMPLOYEE_ID%TYPE := 106;
    ID_2 EMPLOYEES.EMPLOYEE_ID%TYPE := 205;
    
    EMP EMPLOYEES%ROWTYPE;
    
    INCOME EMPLOYEES.SALARY%TYPE;
    BONUS EMPLOYEES.SALARY%TYPE;

PROCEDURE HWF2(EMP_ID IN EMPLOYEES.EMPLOYEE_ID%TYPE,
               BONUS OUT NUMBER) IS
BEGIN
    SELECT * INTO EMP
    FROM EMPLOYEES
    WHERE EMPLOYEE_ID = EMP_ID;
    
    INCOME := EMP.SALARY * (1 + NVL(EMP.COMMISSION_PCT,0));
    IF (INCOME < 10000) THEN
        BONUS := 500;
    ELSE
        BONUS := 100;
    END IF;
END;

BEGIN
    HWF2(ID_1, BONUS);
    DBMS_OUTPUT.PUT_LINE('Employee with ID: ' || ID_1 || ' gets a bonus of $' || BONUS || '.' );
    
    HWF2(ID_2, BONUS);
    DBMS_OUTPUT.PUT_LINE('Employee with ID: ' || ID_1 || ' gets a bonus of $' || BONUS || '.');
END;
/

-- 3.
-- Drops table EMPLOYEES_LOG so the script can be run again without error
DROP TABLE EMPLOYEES_LOG;
    
CREATE TABLE EMPLOYEES_LOG (
    EMPLOYEE_ID     NUMBER(6,0),
    OLD_SALARY      NUMBER(8,2),
    NEW_SALARY      NUMBER(8,2),
    UPDATED_BY      VARCHAR2(15),
    UPDATE_TIME     DATE);
    
SELECT * FROM EMPLOYEES_LOG;
    
CREATE OR REPLACE TRIGGER EMP_UPDATING
    AFTER UPDATE OF SALARY ON EMPLOYEES
    FOR EACH ROW
    
BEGIN
    INSERT INTO EMPLOYEES_LOG (EMPLOYEE_ID, OLD_SALARY, NEW_SALARY, UPDATED_BY, UPDATE_TIME)
        VALUES (:NEW.EMPLOYEE_ID, :OLD.SALARY,   :NEW.SALARY,  USER, SYSDATE);
END;
/

UPDATE EMPLOYEES
    SET SALARY = SALARY + 10
    WHERE DEPARTMENT_ID = 90;

SELECT * FROM EMPLOYEES_LOG;

--Rollback changes so the script can be run agaiin without error
ROLLBACK;

-- 4.
-- Drops table ACCESS_DEPT_LOG so the script can be run again without error
DROP TABLE ACCESS_DEPT_LOG;
    
CREATE TABLE ACCESS_DEPT_LOG (
    OLD_LOC         VARCHAR2(13 BYTE),
    NEW_LOC         VARCHAR2(13 BYTE),
    UPDATED_BY      VARCHAR2(15),
    ACTION          VARCHAR2(10),
    UPDATE_TIME     DATE);
    
SELECT * FROM ACCESS_DEPT_LOG;
    
CREATE OR REPLACE TRIGGER LOC_CHANGE
    AFTER INSERT OR DELETE OR UPDATE OF LOC ON DEPT
    FOR EACH ROW
    
BEGIN
    IF INSERTING THEN
        INSERT INTO ACCESS_DEPT_LOG VALUES
            ('NONE', :NEW.LOC, USER, 'INSERT', SYSDATE);
    ELSIF DELETING THEN
        INSERT INTO ACCESS_DEPT_LOG VALUES
            (:OLD.LOC, 'NONE', USER, 'DELETE', SYSDATE);
    ELSIF UPDATING('LOC') THEN
        INSERT INTO ACCESS_DEPT_LOG VALUES
            (:OLD.LOC, :NEW.LOC, USER, 'UPDATE', SYSDATE);
    END IF;
END;
/

INSERT INTO DEPT 
    VALUES (99, 'FAKE', 'CHICAGO');

UPDATE DEPT
    SET LOC = 'LONDON'
    WHERE DEPTNO = 99;

DELETE DEPT
    WHERE DEPTNO = 99;

SELECT * FROM ACCESS_DEPT_LOG;

--Rollback changes so the script can be run again without error
ROLLBACK;