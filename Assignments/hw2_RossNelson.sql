-- Ross Nelson CSC352 Assignment 2
-- January 27th 2020

-- 1.
DECLARE
    -- Swap the new last name and current last name values to revert changes if ROLLBACK is not being used
    EMP_FIRST_NAME EMPLOYEES.FIRST_NAME%TYPE := 'Neena';
    EMP_LAST_NAME EMPLOYEES.LAST_NAME%TYPE := 'Kochhar';
    EMP_NEW_LAST_NAME EMPLOYEES.LAST_NAME%TYPE := 'Austin';
BEGIN
    UPDATE EMPLOYEES
    SET LAST_NAME = EMP_NEW_LAST_NAME
    WHERE FIRST_NAME = EMP_FIRST_NAME AND LAST_NAME = EMP_LAST_NAME;
    
    DBMS_OUTPUT.PUT_LINE(EMP_FIRST_NAME || ' ' || EMP_NEW_LAST_NAME);
END;
/

--Rollback changes so the script can be run again without error
ROLLBACK;

-- 2.
DECLARE
    DEP_ID DEPARTMENTS.DEPARTMENT_ID%TYPE;
    DEP_NAME DEPARTMENTS.DEPARTMENT_NAME%TYPE;
    MAN_ID DEPARTMENTS.MANAGER_ID%TYPE;
    LOC_ID DEPARTMENTS.LOCATION_ID%TYPE;
BEGIN
    INSERT INTO DEPARTMENTS (DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID)
    VALUES (299, 'Future', 204, 1700);

    SELECT DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID
    INTO DEP_ID, DEP_NAME, MAN_ID, LOC_ID
    FROM DEPARTMENTS
    WHERE DEPARTMENT_ID = 299;
    DBMS_OUTPUT.PUT_LINE(DEP_ID || ' ' || DEP_NAME || ' ' || MAN_ID || ' ' || LOC_ID);
END;
/

-- 3.
DECLARE
    DEL_DEP_NAME DEPARTMENTS.DEPARTMENT_NAME%TYPE;
    DEL_MAN_ID DEPARTMENTS.MANAGER_ID%TYPE;
BEGIN
    DELETE
    FROM DEPARTMENTS
    WHERE DEPARTMENT_ID = 299
    RETURNING DEPARTMENT_NAME, MANAGER_ID
    INTO DEL_DEP_NAME, DEL_MAN_ID;
    DBMS_OUTPUT.PUT_LINE(DEL_DEP_NAME || ' ' || DEL_MAN_ID);
END;
/

-- 4.
DECLARE 
    CLERK VARCHAR2(15) := 'CLERK';
    MANAGER VARCHAR2(15) := 'Manager';
    EMP_JOB_ID VARCHAR2(15) := 'OTHERS';
BEGIN
    FOR EMP IN (
        SELECT FIRST_NAME, LAST_NAME, JOB_ID
        FROM EMPLOYEES
    )
    LOOP
        IF (SUBSTR(EMP.JOB_ID, 4) = 'CLERK') THEN
            EMP_JOB_ID := CLERK;
        ELSIF (SUBSTR(EMP.JOB_ID, 4) = 'MAN') THEN
            EMP_JOB_ID := MANAGER;
        END IF;
        DBMS_OUTPUT.PUT_LINE(EMP.FIRST_NAME || ' ' || EMP.LAST_NAME || ' ' || EMP_JOB_ID);
    END LOOP;
END;
/

-- 5.
ACCEPT EMP_ID PROMPT "Please enter Employee ID: ";
DECLARE
    EMP_SALARY EMPLOYEES.SALARY%TYPE;
    EMP_COMMISSION_PCT EMPLOYEES.COMMISSION_PCT%TYPE;
    EMP_NAME EMPLOYEES.FIRST_NAME%TYPE;

    INC EMPLOYEES.SALARY%TYPE;
    BONUS EMPLOYEES.SALARY%TYPE;
BEGIN
    SELECT SALARY, COMMISSION_PCT, FIRST_NAME
    INTO EMP_SALARY, EMP_COMMISSION_PCT, EMP_NAME
    FROM EMPLOYEES
    WHERE EMPLOYEE_ID = '&EMP_ID';
    
    INC := EMP_SALARY + (NVL(EMP_COMMISSION_PCT, 0) * EMP_SALARY);
    IF (INC = EMP_SALARY) THEN
        IF (INC >= 20000) THEN
            BONUS := 500;
        ELSIF (INC >= 10000) THEN
            BONUS := 600;
        ELSIF (INC > 0) THEN
            BONUS := 700;
        ELSE
            BONUS := 0;
        END IF;
        
    ELSE
        IF (INC >= 15000) THEN
            BONUS := 200;
        ELSIF (INC >= 10000) THEN
            BONUS := 300;
        ELSIF (INC >= 5000) THEN
            BONUS := 400;
        ELSIF (INC > 0) THEN
            BONUS := 500;
        ELSE
            BONUS := 0;
        END IF;
     END IF;
    DBMS_OUTPUT.PUT_LINE('BONUS: ' || BONUS);
END;
/

-- 6.
-- BASIC LOOP
DECLARE
    I NUMBER := 11;
BEGIN
    LOOP
        DBMS_OUTPUT.PUT_LINE(I);
        I := I + 1;
        IF I = 14 THEN
            EXIT;
        END IF;
    END LOOP;
END;
/

-- FOR LOOP
DECLARE
    I NUMBER(2);
BEGIN
    FOR I IN 11 .. 13 LOOP
        DBMS_OUTPUT.PUT_LINE(I);
    END LOOP;
END;
/

-- WHILE LOOP
DECLARE
    I NUMBER(2) := 11;
BEGIN
    WHILE I < 14 LOOP
        DBMS_OUTPUT.PUT_LINE(I);
        I := I + 1;
    END LOOP;
END;
/